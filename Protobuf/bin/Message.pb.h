// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Message.proto

#ifndef PROTOBUF_Message_2eproto__INCLUDED
#define PROTOBUF_Message_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace pbmsg {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Message_2eproto();
void protobuf_AssignDesc_Message_2eproto();
void protobuf_ShutdownFile_Message_2eproto();

class LoginRequest;
class LoginRespond;
class Friend;
class GetFriendsRespond;
class SendMessageRequest;
class FriendNotify;
class MessageNotify;
class WelcomeNotify;
class Request;
class Respond;
class Notify;
class Message;

enum MSG {
  ELoginRequest = 10001,
  ELoginRespond = 10002,
  ELogoutRequest = 10003,
  ELogoutRespond = 10004,
  EKeepaliveRequest = 10005,
  EKeepaliveRespond = 10006,
  EGetFriendsRequest = 10007,
  EGetFriendsRespond = 10008,
  ESendMessageRequest = 10009,
  ESendMessageRespond = 10010,
  EFriendNotify = 20001,
  EMessageNotify = 20002,
  EWelcomeNotify = 20003
};
bool MSG_IsValid(int value);
const MSG MSG_MIN = ELoginRequest;
const MSG MSG_MAX = EWelcomeNotify;
const int MSG_ARRAYSIZE = MSG_MAX + 1;

const ::google::protobuf::EnumDescriptor* MSG_descriptor();
inline const ::std::string& MSG_Name(MSG value) {
  return ::google::protobuf::internal::NameOfEnum(
    MSG_descriptor(), value);
}
inline bool MSG_Parse(
    const ::std::string& name, MSG* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MSG>(
    MSG_descriptor(), name, value);
}
enum ERR_CODE {
  CLIENT_ERR_REFUSE = 100001,
  CLIENT_ERR_ACCEPT = 100002,
  SERVER1_ERR_STOP = 200001,
  SERVER2_ERR_OVERLOAD = 300001
};
bool ERR_CODE_IsValid(int value);
const ERR_CODE ERR_CODE_MIN = CLIENT_ERR_REFUSE;
const ERR_CODE ERR_CODE_MAX = SERVER2_ERR_OVERLOAD;
const int ERR_CODE_ARRAYSIZE = ERR_CODE_MAX + 1;

const ::google::protobuf::EnumDescriptor* ERR_CODE_descriptor();
inline const ::std::string& ERR_CODE_Name(ERR_CODE value) {
  return ::google::protobuf::internal::NameOfEnum(
    ERR_CODE_descriptor(), value);
}
inline bool ERR_CODE_Parse(
    const ::std::string& name, ERR_CODE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ERR_CODE>(
    ERR_CODE_descriptor(), name, value);
}
// ===================================================================

class LoginRequest : public ::google::protobuf::Message {
 public:
  LoginRequest();
  virtual ~LoginRequest();

  LoginRequest(const LoginRequest& from);

  inline LoginRequest& operator=(const LoginRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LoginRequest& default_instance();

  void Swap(LoginRequest* other);

  // implements Message ----------------------------------------------

  LoginRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LoginRequest& from);
  void MergeFrom(const LoginRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes username = 1;
  inline bool has_username() const;
  inline void clear_username();
  static const int kUsernameFieldNumber = 1;
  inline const ::std::string& username() const;
  inline void set_username(const ::std::string& value);
  inline void set_username(const char* value);
  inline void set_username(const void* value, size_t size);
  inline ::std::string* mutable_username();
  inline ::std::string* release_username();
  inline void set_allocated_username(::std::string* username);

  // optional string password = 2;
  inline bool has_password() const;
  inline void clear_password();
  static const int kPasswordFieldNumber = 2;
  inline const ::std::string& password() const;
  inline void set_password(const ::std::string& value);
  inline void set_password(const char* value);
  inline void set_password(const char* value, size_t size);
  inline ::std::string* mutable_password();
  inline ::std::string* release_password();
  inline void set_allocated_password(::std::string* password);

  // @@protoc_insertion_point(class_scope:pbmsg.LoginRequest)
 private:
  inline void set_has_username();
  inline void clear_has_username();
  inline void set_has_password();
  inline void clear_has_password();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* username_;
  ::std::string* password_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Message_2eproto();
  friend void protobuf_AssignDesc_Message_2eproto();
  friend void protobuf_ShutdownFile_Message_2eproto();

  void InitAsDefaultInstance();
  static LoginRequest* default_instance_;
};
// -------------------------------------------------------------------

class LoginRespond : public ::google::protobuf::Message {
 public:
  LoginRespond();
  virtual ~LoginRespond();

  LoginRespond(const LoginRespond& from);

  inline LoginRespond& operator=(const LoginRespond& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LoginRespond& default_instance();

  void Swap(LoginRespond* other);

  // implements Message ----------------------------------------------

  LoginRespond* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LoginRespond& from);
  void MergeFrom(const LoginRespond& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required fixed32 ttl = 1;
  inline bool has_ttl() const;
  inline void clear_ttl();
  static const int kTtlFieldNumber = 1;
  inline ::google::protobuf::uint32 ttl() const;
  inline void set_ttl(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pbmsg.LoginRespond)
 private:
  inline void set_has_ttl();
  inline void clear_has_ttl();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 ttl_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Message_2eproto();
  friend void protobuf_AssignDesc_Message_2eproto();
  friend void protobuf_ShutdownFile_Message_2eproto();

  void InitAsDefaultInstance();
  static LoginRespond* default_instance_;
};
// -------------------------------------------------------------------

class Friend : public ::google::protobuf::Message {
 public:
  Friend();
  virtual ~Friend();

  Friend(const Friend& from);

  inline Friend& operator=(const Friend& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Friend& default_instance();

  void Swap(Friend* other);

  // implements Message ----------------------------------------------

  Friend* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Friend& from);
  void MergeFrom(const Friend& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional bool online = 2;
  inline bool has_online() const;
  inline void clear_online();
  static const int kOnlineFieldNumber = 2;
  inline bool online() const;
  inline void set_online(bool value);

  // @@protoc_insertion_point(class_scope:pbmsg.Friend)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_online();
  inline void clear_has_online();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  bool online_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Message_2eproto();
  friend void protobuf_AssignDesc_Message_2eproto();
  friend void protobuf_ShutdownFile_Message_2eproto();

  void InitAsDefaultInstance();
  static Friend* default_instance_;
};
// -------------------------------------------------------------------

class GetFriendsRespond : public ::google::protobuf::Message {
 public:
  GetFriendsRespond();
  virtual ~GetFriendsRespond();

  GetFriendsRespond(const GetFriendsRespond& from);

  inline GetFriendsRespond& operator=(const GetFriendsRespond& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetFriendsRespond& default_instance();

  void Swap(GetFriendsRespond* other);

  // implements Message ----------------------------------------------

  GetFriendsRespond* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetFriendsRespond& from);
  void MergeFrom(const GetFriendsRespond& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pbmsg.Friend friends = 1;
  inline int friends_size() const;
  inline void clear_friends();
  static const int kFriendsFieldNumber = 1;
  inline const ::pbmsg::Friend& friends(int index) const;
  inline ::pbmsg::Friend* mutable_friends(int index);
  inline ::pbmsg::Friend* add_friends();
  inline const ::google::protobuf::RepeatedPtrField< ::pbmsg::Friend >&
      friends() const;
  inline ::google::protobuf::RepeatedPtrField< ::pbmsg::Friend >*
      mutable_friends();

  // @@protoc_insertion_point(class_scope:pbmsg.GetFriendsRespond)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::pbmsg::Friend > friends_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Message_2eproto();
  friend void protobuf_AssignDesc_Message_2eproto();
  friend void protobuf_ShutdownFile_Message_2eproto();

  void InitAsDefaultInstance();
  static GetFriendsRespond* default_instance_;
};
// -------------------------------------------------------------------

class SendMessageRequest : public ::google::protobuf::Message {
 public:
  SendMessageRequest();
  virtual ~SendMessageRequest();

  SendMessageRequest(const SendMessageRequest& from);

  inline SendMessageRequest& operator=(const SendMessageRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SendMessageRequest& default_instance();

  void Swap(SendMessageRequest* other);

  // implements Message ----------------------------------------------

  SendMessageRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SendMessageRequest& from);
  void MergeFrom(const SendMessageRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes receiver = 1;
  inline bool has_receiver() const;
  inline void clear_receiver();
  static const int kReceiverFieldNumber = 1;
  inline const ::std::string& receiver() const;
  inline void set_receiver(const ::std::string& value);
  inline void set_receiver(const char* value);
  inline void set_receiver(const void* value, size_t size);
  inline ::std::string* mutable_receiver();
  inline ::std::string* release_receiver();
  inline void set_allocated_receiver(::std::string* receiver);

  // required bytes text = 2;
  inline bool has_text() const;
  inline void clear_text();
  static const int kTextFieldNumber = 2;
  inline const ::std::string& text() const;
  inline void set_text(const ::std::string& value);
  inline void set_text(const char* value);
  inline void set_text(const void* value, size_t size);
  inline ::std::string* mutable_text();
  inline ::std::string* release_text();
  inline void set_allocated_text(::std::string* text);

  // @@protoc_insertion_point(class_scope:pbmsg.SendMessageRequest)
 private:
  inline void set_has_receiver();
  inline void clear_has_receiver();
  inline void set_has_text();
  inline void clear_has_text();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* receiver_;
  ::std::string* text_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Message_2eproto();
  friend void protobuf_AssignDesc_Message_2eproto();
  friend void protobuf_ShutdownFile_Message_2eproto();

  void InitAsDefaultInstance();
  static SendMessageRequest* default_instance_;
};
// -------------------------------------------------------------------

class FriendNotify : public ::google::protobuf::Message {
 public:
  FriendNotify();
  virtual ~FriendNotify();

  FriendNotify(const FriendNotify& from);

  inline FriendNotify& operator=(const FriendNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FriendNotify& default_instance();

  void Swap(FriendNotify* other);

  // implements Message ----------------------------------------------

  FriendNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FriendNotify& from);
  void MergeFrom(const FriendNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional bool online = 2;
  inline bool has_online() const;
  inline void clear_online();
  static const int kOnlineFieldNumber = 2;
  inline bool online() const;
  inline void set_online(bool value);

  // @@protoc_insertion_point(class_scope:pbmsg.FriendNotify)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_online();
  inline void clear_has_online();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  bool online_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Message_2eproto();
  friend void protobuf_AssignDesc_Message_2eproto();
  friend void protobuf_ShutdownFile_Message_2eproto();

  void InitAsDefaultInstance();
  static FriendNotify* default_instance_;
};
// -------------------------------------------------------------------

class MessageNotify : public ::google::protobuf::Message {
 public:
  MessageNotify();
  virtual ~MessageNotify();

  MessageNotify(const MessageNotify& from);

  inline MessageNotify& operator=(const MessageNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MessageNotify& default_instance();

  void Swap(MessageNotify* other);

  // implements Message ----------------------------------------------

  MessageNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MessageNotify& from);
  void MergeFrom(const MessageNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes sender = 1;
  inline bool has_sender() const;
  inline void clear_sender();
  static const int kSenderFieldNumber = 1;
  inline const ::std::string& sender() const;
  inline void set_sender(const ::std::string& value);
  inline void set_sender(const char* value);
  inline void set_sender(const void* value, size_t size);
  inline ::std::string* mutable_sender();
  inline ::std::string* release_sender();
  inline void set_allocated_sender(::std::string* sender);

  // required bytes text = 2;
  inline bool has_text() const;
  inline void clear_text();
  static const int kTextFieldNumber = 2;
  inline const ::std::string& text() const;
  inline void set_text(const ::std::string& value);
  inline void set_text(const char* value);
  inline void set_text(const void* value, size_t size);
  inline ::std::string* mutable_text();
  inline ::std::string* release_text();
  inline void set_allocated_text(::std::string* text);

  // required string timestamp = 3;
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 3;
  inline const ::std::string& timestamp() const;
  inline void set_timestamp(const ::std::string& value);
  inline void set_timestamp(const char* value);
  inline void set_timestamp(const char* value, size_t size);
  inline ::std::string* mutable_timestamp();
  inline ::std::string* release_timestamp();
  inline void set_allocated_timestamp(::std::string* timestamp);

  // @@protoc_insertion_point(class_scope:pbmsg.MessageNotify)
 private:
  inline void set_has_sender();
  inline void clear_has_sender();
  inline void set_has_text();
  inline void clear_has_text();
  inline void set_has_timestamp();
  inline void clear_has_timestamp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* sender_;
  ::std::string* text_;
  ::std::string* timestamp_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Message_2eproto();
  friend void protobuf_AssignDesc_Message_2eproto();
  friend void protobuf_ShutdownFile_Message_2eproto();

  void InitAsDefaultInstance();
  static MessageNotify* default_instance_;
};
// -------------------------------------------------------------------

class WelcomeNotify : public ::google::protobuf::Message {
 public:
  WelcomeNotify();
  virtual ~WelcomeNotify();

  WelcomeNotify(const WelcomeNotify& from);

  inline WelcomeNotify& operator=(const WelcomeNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WelcomeNotify& default_instance();

  void Swap(WelcomeNotify* other);

  // implements Message ----------------------------------------------

  WelcomeNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WelcomeNotify& from);
  void MergeFrom(const WelcomeNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes text = 1;
  inline bool has_text() const;
  inline void clear_text();
  static const int kTextFieldNumber = 1;
  inline const ::std::string& text() const;
  inline void set_text(const ::std::string& value);
  inline void set_text(const char* value);
  inline void set_text(const void* value, size_t size);
  inline ::std::string* mutable_text();
  inline ::std::string* release_text();
  inline void set_allocated_text(::std::string* text);

  // @@protoc_insertion_point(class_scope:pbmsg.WelcomeNotify)
 private:
  inline void set_has_text();
  inline void clear_has_text();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* text_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Message_2eproto();
  friend void protobuf_AssignDesc_Message_2eproto();
  friend void protobuf_ShutdownFile_Message_2eproto();

  void InitAsDefaultInstance();
  static WelcomeNotify* default_instance_;
};
// -------------------------------------------------------------------

class Request : public ::google::protobuf::Message {
 public:
  Request();
  virtual ~Request();

  Request(const Request& from);

  inline Request& operator=(const Request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Request& default_instance();

  void Swap(Request* other);

  // implements Message ----------------------------------------------

  Request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Request& from);
  void MergeFrom(const Request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pbmsg.LoginRequest login = 1;
  inline bool has_login() const;
  inline void clear_login();
  static const int kLoginFieldNumber = 1;
  inline const ::pbmsg::LoginRequest& login() const;
  inline ::pbmsg::LoginRequest* mutable_login();
  inline ::pbmsg::LoginRequest* release_login();
  inline void set_allocated_login(::pbmsg::LoginRequest* login);

  // optional .pbmsg.SendMessageRequest sendMessage = 2;
  inline bool has_sendmessage() const;
  inline void clear_sendmessage();
  static const int kSendMessageFieldNumber = 2;
  inline const ::pbmsg::SendMessageRequest& sendmessage() const;
  inline ::pbmsg::SendMessageRequest* mutable_sendmessage();
  inline ::pbmsg::SendMessageRequest* release_sendmessage();
  inline void set_allocated_sendmessage(::pbmsg::SendMessageRequest* sendmessage);

  // @@protoc_insertion_point(class_scope:pbmsg.Request)
 private:
  inline void set_has_login();
  inline void clear_has_login();
  inline void set_has_sendmessage();
  inline void clear_has_sendmessage();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::pbmsg::LoginRequest* login_;
  ::pbmsg::SendMessageRequest* sendmessage_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Message_2eproto();
  friend void protobuf_AssignDesc_Message_2eproto();
  friend void protobuf_ShutdownFile_Message_2eproto();

  void InitAsDefaultInstance();
  static Request* default_instance_;
};
// -------------------------------------------------------------------

class Respond : public ::google::protobuf::Message {
 public:
  Respond();
  virtual ~Respond();

  Respond(const Respond& from);

  inline Respond& operator=(const Respond& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Respond& default_instance();

  void Swap(Respond* other);

  // implements Message ----------------------------------------------

  Respond* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Respond& from);
  void MergeFrom(const Respond& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline bool result() const;
  inline void set_result(bool value);

  // required bool lastRespond = 2;
  inline bool has_lastrespond() const;
  inline void clear_lastrespond();
  static const int kLastRespondFieldNumber = 2;
  inline bool lastrespond() const;
  inline void set_lastrespond(bool value);

  // optional bytes errorDescribe = 3;
  inline bool has_errordescribe() const;
  inline void clear_errordescribe();
  static const int kErrorDescribeFieldNumber = 3;
  inline const ::std::string& errordescribe() const;
  inline void set_errordescribe(const ::std::string& value);
  inline void set_errordescribe(const char* value);
  inline void set_errordescribe(const void* value, size_t size);
  inline ::std::string* mutable_errordescribe();
  inline ::std::string* release_errordescribe();
  inline void set_allocated_errordescribe(::std::string* errordescribe);

  // optional .pbmsg.LoginRespond login = 4;
  inline bool has_login() const;
  inline void clear_login();
  static const int kLoginFieldNumber = 4;
  inline const ::pbmsg::LoginRespond& login() const;
  inline ::pbmsg::LoginRespond* mutable_login();
  inline ::pbmsg::LoginRespond* release_login();
  inline void set_allocated_login(::pbmsg::LoginRespond* login);

  // optional .pbmsg.GetFriendsRespond friends = 5;
  inline bool has_friends() const;
  inline void clear_friends();
  static const int kFriendsFieldNumber = 5;
  inline const ::pbmsg::GetFriendsRespond& friends() const;
  inline ::pbmsg::GetFriendsRespond* mutable_friends();
  inline ::pbmsg::GetFriendsRespond* release_friends();
  inline void set_allocated_friends(::pbmsg::GetFriendsRespond* friends);

  // @@protoc_insertion_point(class_scope:pbmsg.Respond)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_lastrespond();
  inline void clear_has_lastrespond();
  inline void set_has_errordescribe();
  inline void clear_has_errordescribe();
  inline void set_has_login();
  inline void clear_has_login();
  inline void set_has_friends();
  inline void clear_has_friends();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* errordescribe_;
  ::pbmsg::LoginRespond* login_;
  ::pbmsg::GetFriendsRespond* friends_;
  bool result_;
  bool lastrespond_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_Message_2eproto();
  friend void protobuf_AssignDesc_Message_2eproto();
  friend void protobuf_ShutdownFile_Message_2eproto();

  void InitAsDefaultInstance();
  static Respond* default_instance_;
};
// -------------------------------------------------------------------

class Notify : public ::google::protobuf::Message {
 public:
  Notify();
  virtual ~Notify();

  Notify(const Notify& from);

  inline Notify& operator=(const Notify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Notify& default_instance();

  void Swap(Notify* other);

  // implements Message ----------------------------------------------

  Notify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Notify& from);
  void MergeFrom(const Notify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pbmsg.FriendNotify friend = 1;
  inline bool has_friend_() const;
  inline void clear_friend_();
  static const int kFriendFieldNumber = 1;
  inline const ::pbmsg::FriendNotify& friend_() const;
  inline ::pbmsg::FriendNotify* mutable_friend_();
  inline ::pbmsg::FriendNotify* release_friend_();
  inline void set_allocated_friend_(::pbmsg::FriendNotify* friend_);

  // optional .pbmsg.MessageNotify msg = 2;
  inline bool has_msg() const;
  inline void clear_msg();
  static const int kMsgFieldNumber = 2;
  inline const ::pbmsg::MessageNotify& msg() const;
  inline ::pbmsg::MessageNotify* mutable_msg();
  inline ::pbmsg::MessageNotify* release_msg();
  inline void set_allocated_msg(::pbmsg::MessageNotify* msg);

  // optional .pbmsg.WelcomeNotify welcome = 3;
  inline bool has_welcome() const;
  inline void clear_welcome();
  static const int kWelcomeFieldNumber = 3;
  inline const ::pbmsg::WelcomeNotify& welcome() const;
  inline ::pbmsg::WelcomeNotify* mutable_welcome();
  inline ::pbmsg::WelcomeNotify* release_welcome();
  inline void set_allocated_welcome(::pbmsg::WelcomeNotify* welcome);

  // @@protoc_insertion_point(class_scope:pbmsg.Notify)
 private:
  inline void set_has_friend_();
  inline void clear_has_friend_();
  inline void set_has_msg();
  inline void clear_has_msg();
  inline void set_has_welcome();
  inline void clear_has_welcome();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::pbmsg::FriendNotify* friend__;
  ::pbmsg::MessageNotify* msg_;
  ::pbmsg::WelcomeNotify* welcome_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Message_2eproto();
  friend void protobuf_AssignDesc_Message_2eproto();
  friend void protobuf_ShutdownFile_Message_2eproto();

  void InitAsDefaultInstance();
  static Notify* default_instance_;
};
// -------------------------------------------------------------------

class Message : public ::google::protobuf::Message {
 public:
  Message();
  virtual ~Message();

  Message(const Message& from);

  inline Message& operator=(const Message& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Message& default_instance();

  void Swap(Message* other);

  // implements Message ----------------------------------------------

  Message* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Message& from);
  void MergeFrom(const Message& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .pbmsg.MSG msgType = 1;
  inline bool has_msgtype() const;
  inline void clear_msgtype();
  static const int kMsgTypeFieldNumber = 1;
  inline ::pbmsg::MSG msgtype() const;
  inline void set_msgtype(::pbmsg::MSG value);

  // required fixed32 sequence = 2;
  inline bool has_sequence() const;
  inline void clear_sequence();
  static const int kSequenceFieldNumber = 2;
  inline ::google::protobuf::uint32 sequence() const;
  inline void set_sequence(::google::protobuf::uint32 value);

  // optional fixed32 sessionId = 3;
  inline bool has_sessionid() const;
  inline void clear_sessionid();
  static const int kSessionIdFieldNumber = 3;
  inline ::google::protobuf::uint32 sessionid() const;
  inline void set_sessionid(::google::protobuf::uint32 value);

  // optional .pbmsg.Request request = 4;
  inline bool has_request() const;
  inline void clear_request();
  static const int kRequestFieldNumber = 4;
  inline const ::pbmsg::Request& request() const;
  inline ::pbmsg::Request* mutable_request();
  inline ::pbmsg::Request* release_request();
  inline void set_allocated_request(::pbmsg::Request* request);

  // optional .pbmsg.Respond respond = 5;
  inline bool has_respond() const;
  inline void clear_respond();
  static const int kRespondFieldNumber = 5;
  inline const ::pbmsg::Respond& respond() const;
  inline ::pbmsg::Respond* mutable_respond();
  inline ::pbmsg::Respond* release_respond();
  inline void set_allocated_respond(::pbmsg::Respond* respond);

  // optional .pbmsg.Notify notify = 6;
  inline bool has_notify() const;
  inline void clear_notify();
  static const int kNotifyFieldNumber = 6;
  inline const ::pbmsg::Notify& notify() const;
  inline ::pbmsg::Notify* mutable_notify();
  inline ::pbmsg::Notify* release_notify();
  inline void set_allocated_notify(::pbmsg::Notify* notify);

  // @@protoc_insertion_point(class_scope:pbmsg.Message)
 private:
  inline void set_has_msgtype();
  inline void clear_has_msgtype();
  inline void set_has_sequence();
  inline void clear_has_sequence();
  inline void set_has_sessionid();
  inline void clear_has_sessionid();
  inline void set_has_request();
  inline void clear_has_request();
  inline void set_has_respond();
  inline void clear_has_respond();
  inline void set_has_notify();
  inline void clear_has_notify();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int msgtype_;
  ::google::protobuf::uint32 sequence_;
  ::pbmsg::Request* request_;
  ::pbmsg::Respond* respond_;
  ::pbmsg::Notify* notify_;
  ::google::protobuf::uint32 sessionid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_Message_2eproto();
  friend void protobuf_AssignDesc_Message_2eproto();
  friend void protobuf_ShutdownFile_Message_2eproto();

  void InitAsDefaultInstance();
  static Message* default_instance_;
};
// ===================================================================


// ===================================================================

// LoginRequest

// required bytes username = 1;
inline bool LoginRequest::has_username() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LoginRequest::set_has_username() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LoginRequest::clear_has_username() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LoginRequest::clear_username() {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    username_->clear();
  }
  clear_has_username();
}
inline const ::std::string& LoginRequest::username() const {
  return *username_;
}
inline void LoginRequest::set_username(const ::std::string& value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(value);
}
inline void LoginRequest::set_username(const char* value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(value);
}
inline void LoginRequest::set_username(const void* value, size_t size) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LoginRequest::mutable_username() {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  return username_;
}
inline ::std::string* LoginRequest::release_username() {
  clear_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = username_;
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LoginRequest::set_allocated_username(::std::string* username) {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    delete username_;
  }
  if (username) {
    set_has_username();
    username_ = username;
  } else {
    clear_has_username();
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string password = 2;
inline bool LoginRequest::has_password() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LoginRequest::set_has_password() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LoginRequest::clear_has_password() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LoginRequest::clear_password() {
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    password_->clear();
  }
  clear_has_password();
}
inline const ::std::string& LoginRequest::password() const {
  return *password_;
}
inline void LoginRequest::set_password(const ::std::string& value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void LoginRequest::set_password(const char* value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void LoginRequest::set_password(const char* value, size_t size) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LoginRequest::mutable_password() {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  return password_;
}
inline ::std::string* LoginRequest::release_password() {
  clear_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = password_;
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LoginRequest::set_allocated_password(::std::string* password) {
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (password) {
    set_has_password();
    password_ = password;
  } else {
    clear_has_password();
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// LoginRespond

// required fixed32 ttl = 1;
inline bool LoginRespond::has_ttl() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LoginRespond::set_has_ttl() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LoginRespond::clear_has_ttl() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LoginRespond::clear_ttl() {
  ttl_ = 0u;
  clear_has_ttl();
}
inline ::google::protobuf::uint32 LoginRespond::ttl() const {
  return ttl_;
}
inline void LoginRespond::set_ttl(::google::protobuf::uint32 value) {
  set_has_ttl();
  ttl_ = value;
}

// -------------------------------------------------------------------

// Friend

// required bytes name = 1;
inline bool Friend::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Friend::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Friend::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Friend::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Friend::name() const {
  return *name_;
}
inline void Friend::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Friend::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Friend::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Friend::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* Friend::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Friend::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bool online = 2;
inline bool Friend::has_online() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Friend::set_has_online() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Friend::clear_has_online() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Friend::clear_online() {
  online_ = false;
  clear_has_online();
}
inline bool Friend::online() const {
  return online_;
}
inline void Friend::set_online(bool value) {
  set_has_online();
  online_ = value;
}

// -------------------------------------------------------------------

// GetFriendsRespond

// repeated .pbmsg.Friend friends = 1;
inline int GetFriendsRespond::friends_size() const {
  return friends_.size();
}
inline void GetFriendsRespond::clear_friends() {
  friends_.Clear();
}
inline const ::pbmsg::Friend& GetFriendsRespond::friends(int index) const {
  return friends_.Get(index);
}
inline ::pbmsg::Friend* GetFriendsRespond::mutable_friends(int index) {
  return friends_.Mutable(index);
}
inline ::pbmsg::Friend* GetFriendsRespond::add_friends() {
  return friends_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pbmsg::Friend >&
GetFriendsRespond::friends() const {
  return friends_;
}
inline ::google::protobuf::RepeatedPtrField< ::pbmsg::Friend >*
GetFriendsRespond::mutable_friends() {
  return &friends_;
}

// -------------------------------------------------------------------

// SendMessageRequest

// optional bytes receiver = 1;
inline bool SendMessageRequest::has_receiver() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SendMessageRequest::set_has_receiver() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SendMessageRequest::clear_has_receiver() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SendMessageRequest::clear_receiver() {
  if (receiver_ != &::google::protobuf::internal::kEmptyString) {
    receiver_->clear();
  }
  clear_has_receiver();
}
inline const ::std::string& SendMessageRequest::receiver() const {
  return *receiver_;
}
inline void SendMessageRequest::set_receiver(const ::std::string& value) {
  set_has_receiver();
  if (receiver_ == &::google::protobuf::internal::kEmptyString) {
    receiver_ = new ::std::string;
  }
  receiver_->assign(value);
}
inline void SendMessageRequest::set_receiver(const char* value) {
  set_has_receiver();
  if (receiver_ == &::google::protobuf::internal::kEmptyString) {
    receiver_ = new ::std::string;
  }
  receiver_->assign(value);
}
inline void SendMessageRequest::set_receiver(const void* value, size_t size) {
  set_has_receiver();
  if (receiver_ == &::google::protobuf::internal::kEmptyString) {
    receiver_ = new ::std::string;
  }
  receiver_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SendMessageRequest::mutable_receiver() {
  set_has_receiver();
  if (receiver_ == &::google::protobuf::internal::kEmptyString) {
    receiver_ = new ::std::string;
  }
  return receiver_;
}
inline ::std::string* SendMessageRequest::release_receiver() {
  clear_has_receiver();
  if (receiver_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = receiver_;
    receiver_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SendMessageRequest::set_allocated_receiver(::std::string* receiver) {
  if (receiver_ != &::google::protobuf::internal::kEmptyString) {
    delete receiver_;
  }
  if (receiver) {
    set_has_receiver();
    receiver_ = receiver;
  } else {
    clear_has_receiver();
    receiver_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required bytes text = 2;
inline bool SendMessageRequest::has_text() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SendMessageRequest::set_has_text() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SendMessageRequest::clear_has_text() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SendMessageRequest::clear_text() {
  if (text_ != &::google::protobuf::internal::kEmptyString) {
    text_->clear();
  }
  clear_has_text();
}
inline const ::std::string& SendMessageRequest::text() const {
  return *text_;
}
inline void SendMessageRequest::set_text(const ::std::string& value) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  text_->assign(value);
}
inline void SendMessageRequest::set_text(const char* value) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  text_->assign(value);
}
inline void SendMessageRequest::set_text(const void* value, size_t size) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  text_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SendMessageRequest::mutable_text() {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  return text_;
}
inline ::std::string* SendMessageRequest::release_text() {
  clear_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = text_;
    text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SendMessageRequest::set_allocated_text(::std::string* text) {
  if (text_ != &::google::protobuf::internal::kEmptyString) {
    delete text_;
  }
  if (text) {
    set_has_text();
    text_ = text;
  } else {
    clear_has_text();
    text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// FriendNotify

// required bytes name = 1;
inline bool FriendNotify::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FriendNotify::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FriendNotify::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FriendNotify::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& FriendNotify::name() const {
  return *name_;
}
inline void FriendNotify::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void FriendNotify::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void FriendNotify::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FriendNotify::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* FriendNotify::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FriendNotify::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bool online = 2;
inline bool FriendNotify::has_online() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FriendNotify::set_has_online() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FriendNotify::clear_has_online() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FriendNotify::clear_online() {
  online_ = false;
  clear_has_online();
}
inline bool FriendNotify::online() const {
  return online_;
}
inline void FriendNotify::set_online(bool value) {
  set_has_online();
  online_ = value;
}

// -------------------------------------------------------------------

// MessageNotify

// required bytes sender = 1;
inline bool MessageNotify::has_sender() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MessageNotify::set_has_sender() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MessageNotify::clear_has_sender() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MessageNotify::clear_sender() {
  if (sender_ != &::google::protobuf::internal::kEmptyString) {
    sender_->clear();
  }
  clear_has_sender();
}
inline const ::std::string& MessageNotify::sender() const {
  return *sender_;
}
inline void MessageNotify::set_sender(const ::std::string& value) {
  set_has_sender();
  if (sender_ == &::google::protobuf::internal::kEmptyString) {
    sender_ = new ::std::string;
  }
  sender_->assign(value);
}
inline void MessageNotify::set_sender(const char* value) {
  set_has_sender();
  if (sender_ == &::google::protobuf::internal::kEmptyString) {
    sender_ = new ::std::string;
  }
  sender_->assign(value);
}
inline void MessageNotify::set_sender(const void* value, size_t size) {
  set_has_sender();
  if (sender_ == &::google::protobuf::internal::kEmptyString) {
    sender_ = new ::std::string;
  }
  sender_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MessageNotify::mutable_sender() {
  set_has_sender();
  if (sender_ == &::google::protobuf::internal::kEmptyString) {
    sender_ = new ::std::string;
  }
  return sender_;
}
inline ::std::string* MessageNotify::release_sender() {
  clear_has_sender();
  if (sender_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sender_;
    sender_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MessageNotify::set_allocated_sender(::std::string* sender) {
  if (sender_ != &::google::protobuf::internal::kEmptyString) {
    delete sender_;
  }
  if (sender) {
    set_has_sender();
    sender_ = sender;
  } else {
    clear_has_sender();
    sender_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required bytes text = 2;
inline bool MessageNotify::has_text() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MessageNotify::set_has_text() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MessageNotify::clear_has_text() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MessageNotify::clear_text() {
  if (text_ != &::google::protobuf::internal::kEmptyString) {
    text_->clear();
  }
  clear_has_text();
}
inline const ::std::string& MessageNotify::text() const {
  return *text_;
}
inline void MessageNotify::set_text(const ::std::string& value) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  text_->assign(value);
}
inline void MessageNotify::set_text(const char* value) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  text_->assign(value);
}
inline void MessageNotify::set_text(const void* value, size_t size) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  text_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MessageNotify::mutable_text() {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  return text_;
}
inline ::std::string* MessageNotify::release_text() {
  clear_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = text_;
    text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MessageNotify::set_allocated_text(::std::string* text) {
  if (text_ != &::google::protobuf::internal::kEmptyString) {
    delete text_;
  }
  if (text) {
    set_has_text();
    text_ = text;
  } else {
    clear_has_text();
    text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string timestamp = 3;
inline bool MessageNotify::has_timestamp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MessageNotify::set_has_timestamp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MessageNotify::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MessageNotify::clear_timestamp() {
  if (timestamp_ != &::google::protobuf::internal::kEmptyString) {
    timestamp_->clear();
  }
  clear_has_timestamp();
}
inline const ::std::string& MessageNotify::timestamp() const {
  return *timestamp_;
}
inline void MessageNotify::set_timestamp(const ::std::string& value) {
  set_has_timestamp();
  if (timestamp_ == &::google::protobuf::internal::kEmptyString) {
    timestamp_ = new ::std::string;
  }
  timestamp_->assign(value);
}
inline void MessageNotify::set_timestamp(const char* value) {
  set_has_timestamp();
  if (timestamp_ == &::google::protobuf::internal::kEmptyString) {
    timestamp_ = new ::std::string;
  }
  timestamp_->assign(value);
}
inline void MessageNotify::set_timestamp(const char* value, size_t size) {
  set_has_timestamp();
  if (timestamp_ == &::google::protobuf::internal::kEmptyString) {
    timestamp_ = new ::std::string;
  }
  timestamp_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MessageNotify::mutable_timestamp() {
  set_has_timestamp();
  if (timestamp_ == &::google::protobuf::internal::kEmptyString) {
    timestamp_ = new ::std::string;
  }
  return timestamp_;
}
inline ::std::string* MessageNotify::release_timestamp() {
  clear_has_timestamp();
  if (timestamp_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = timestamp_;
    timestamp_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MessageNotify::set_allocated_timestamp(::std::string* timestamp) {
  if (timestamp_ != &::google::protobuf::internal::kEmptyString) {
    delete timestamp_;
  }
  if (timestamp) {
    set_has_timestamp();
    timestamp_ = timestamp;
  } else {
    clear_has_timestamp();
    timestamp_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// WelcomeNotify

// required bytes text = 1;
inline bool WelcomeNotify::has_text() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WelcomeNotify::set_has_text() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WelcomeNotify::clear_has_text() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WelcomeNotify::clear_text() {
  if (text_ != &::google::protobuf::internal::kEmptyString) {
    text_->clear();
  }
  clear_has_text();
}
inline const ::std::string& WelcomeNotify::text() const {
  return *text_;
}
inline void WelcomeNotify::set_text(const ::std::string& value) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  text_->assign(value);
}
inline void WelcomeNotify::set_text(const char* value) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  text_->assign(value);
}
inline void WelcomeNotify::set_text(const void* value, size_t size) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  text_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* WelcomeNotify::mutable_text() {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  return text_;
}
inline ::std::string* WelcomeNotify::release_text() {
  clear_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = text_;
    text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void WelcomeNotify::set_allocated_text(::std::string* text) {
  if (text_ != &::google::protobuf::internal::kEmptyString) {
    delete text_;
  }
  if (text) {
    set_has_text();
    text_ = text;
  } else {
    clear_has_text();
    text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// Request

// optional .pbmsg.LoginRequest login = 1;
inline bool Request::has_login() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Request::set_has_login() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Request::clear_has_login() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Request::clear_login() {
  if (login_ != NULL) login_->::pbmsg::LoginRequest::Clear();
  clear_has_login();
}
inline const ::pbmsg::LoginRequest& Request::login() const {
  return login_ != NULL ? *login_ : *default_instance_->login_;
}
inline ::pbmsg::LoginRequest* Request::mutable_login() {
  set_has_login();
  if (login_ == NULL) login_ = new ::pbmsg::LoginRequest;
  return login_;
}
inline ::pbmsg::LoginRequest* Request::release_login() {
  clear_has_login();
  ::pbmsg::LoginRequest* temp = login_;
  login_ = NULL;
  return temp;
}
inline void Request::set_allocated_login(::pbmsg::LoginRequest* login) {
  delete login_;
  login_ = login;
  if (login) {
    set_has_login();
  } else {
    clear_has_login();
  }
}

// optional .pbmsg.SendMessageRequest sendMessage = 2;
inline bool Request::has_sendmessage() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Request::set_has_sendmessage() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Request::clear_has_sendmessage() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Request::clear_sendmessage() {
  if (sendmessage_ != NULL) sendmessage_->::pbmsg::SendMessageRequest::Clear();
  clear_has_sendmessage();
}
inline const ::pbmsg::SendMessageRequest& Request::sendmessage() const {
  return sendmessage_ != NULL ? *sendmessage_ : *default_instance_->sendmessage_;
}
inline ::pbmsg::SendMessageRequest* Request::mutable_sendmessage() {
  set_has_sendmessage();
  if (sendmessage_ == NULL) sendmessage_ = new ::pbmsg::SendMessageRequest;
  return sendmessage_;
}
inline ::pbmsg::SendMessageRequest* Request::release_sendmessage() {
  clear_has_sendmessage();
  ::pbmsg::SendMessageRequest* temp = sendmessage_;
  sendmessage_ = NULL;
  return temp;
}
inline void Request::set_allocated_sendmessage(::pbmsg::SendMessageRequest* sendmessage) {
  delete sendmessage_;
  sendmessage_ = sendmessage;
  if (sendmessage) {
    set_has_sendmessage();
  } else {
    clear_has_sendmessage();
  }
}

// -------------------------------------------------------------------

// Respond

// required bool result = 1;
inline bool Respond::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Respond::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Respond::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Respond::clear_result() {
  result_ = false;
  clear_has_result();
}
inline bool Respond::result() const {
  return result_;
}
inline void Respond::set_result(bool value) {
  set_has_result();
  result_ = value;
}

// required bool lastRespond = 2;
inline bool Respond::has_lastrespond() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Respond::set_has_lastrespond() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Respond::clear_has_lastrespond() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Respond::clear_lastrespond() {
  lastrespond_ = false;
  clear_has_lastrespond();
}
inline bool Respond::lastrespond() const {
  return lastrespond_;
}
inline void Respond::set_lastrespond(bool value) {
  set_has_lastrespond();
  lastrespond_ = value;
}

// optional bytes errorDescribe = 3;
inline bool Respond::has_errordescribe() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Respond::set_has_errordescribe() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Respond::clear_has_errordescribe() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Respond::clear_errordescribe() {
  if (errordescribe_ != &::google::protobuf::internal::kEmptyString) {
    errordescribe_->clear();
  }
  clear_has_errordescribe();
}
inline const ::std::string& Respond::errordescribe() const {
  return *errordescribe_;
}
inline void Respond::set_errordescribe(const ::std::string& value) {
  set_has_errordescribe();
  if (errordescribe_ == &::google::protobuf::internal::kEmptyString) {
    errordescribe_ = new ::std::string;
  }
  errordescribe_->assign(value);
}
inline void Respond::set_errordescribe(const char* value) {
  set_has_errordescribe();
  if (errordescribe_ == &::google::protobuf::internal::kEmptyString) {
    errordescribe_ = new ::std::string;
  }
  errordescribe_->assign(value);
}
inline void Respond::set_errordescribe(const void* value, size_t size) {
  set_has_errordescribe();
  if (errordescribe_ == &::google::protobuf::internal::kEmptyString) {
    errordescribe_ = new ::std::string;
  }
  errordescribe_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Respond::mutable_errordescribe() {
  set_has_errordescribe();
  if (errordescribe_ == &::google::protobuf::internal::kEmptyString) {
    errordescribe_ = new ::std::string;
  }
  return errordescribe_;
}
inline ::std::string* Respond::release_errordescribe() {
  clear_has_errordescribe();
  if (errordescribe_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = errordescribe_;
    errordescribe_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Respond::set_allocated_errordescribe(::std::string* errordescribe) {
  if (errordescribe_ != &::google::protobuf::internal::kEmptyString) {
    delete errordescribe_;
  }
  if (errordescribe) {
    set_has_errordescribe();
    errordescribe_ = errordescribe;
  } else {
    clear_has_errordescribe();
    errordescribe_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .pbmsg.LoginRespond login = 4;
inline bool Respond::has_login() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Respond::set_has_login() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Respond::clear_has_login() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Respond::clear_login() {
  if (login_ != NULL) login_->::pbmsg::LoginRespond::Clear();
  clear_has_login();
}
inline const ::pbmsg::LoginRespond& Respond::login() const {
  return login_ != NULL ? *login_ : *default_instance_->login_;
}
inline ::pbmsg::LoginRespond* Respond::mutable_login() {
  set_has_login();
  if (login_ == NULL) login_ = new ::pbmsg::LoginRespond;
  return login_;
}
inline ::pbmsg::LoginRespond* Respond::release_login() {
  clear_has_login();
  ::pbmsg::LoginRespond* temp = login_;
  login_ = NULL;
  return temp;
}
inline void Respond::set_allocated_login(::pbmsg::LoginRespond* login) {
  delete login_;
  login_ = login;
  if (login) {
    set_has_login();
  } else {
    clear_has_login();
  }
}

// optional .pbmsg.GetFriendsRespond friends = 5;
inline bool Respond::has_friends() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Respond::set_has_friends() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Respond::clear_has_friends() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Respond::clear_friends() {
  if (friends_ != NULL) friends_->::pbmsg::GetFriendsRespond::Clear();
  clear_has_friends();
}
inline const ::pbmsg::GetFriendsRespond& Respond::friends() const {
  return friends_ != NULL ? *friends_ : *default_instance_->friends_;
}
inline ::pbmsg::GetFriendsRespond* Respond::mutable_friends() {
  set_has_friends();
  if (friends_ == NULL) friends_ = new ::pbmsg::GetFriendsRespond;
  return friends_;
}
inline ::pbmsg::GetFriendsRespond* Respond::release_friends() {
  clear_has_friends();
  ::pbmsg::GetFriendsRespond* temp = friends_;
  friends_ = NULL;
  return temp;
}
inline void Respond::set_allocated_friends(::pbmsg::GetFriendsRespond* friends) {
  delete friends_;
  friends_ = friends;
  if (friends) {
    set_has_friends();
  } else {
    clear_has_friends();
  }
}

// -------------------------------------------------------------------

// Notify

// optional .pbmsg.FriendNotify friend = 1;
inline bool Notify::has_friend_() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Notify::set_has_friend_() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Notify::clear_has_friend_() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Notify::clear_friend_() {
  if (friend__ != NULL) friend__->::pbmsg::FriendNotify::Clear();
  clear_has_friend_();
}
inline const ::pbmsg::FriendNotify& Notify::friend_() const {
  return friend__ != NULL ? *friend__ : *default_instance_->friend__;
}
inline ::pbmsg::FriendNotify* Notify::mutable_friend_() {
  set_has_friend_();
  if (friend__ == NULL) friend__ = new ::pbmsg::FriendNotify;
  return friend__;
}
inline ::pbmsg::FriendNotify* Notify::release_friend_() {
  clear_has_friend_();
  ::pbmsg::FriendNotify* temp = friend__;
  friend__ = NULL;
  return temp;
}
inline void Notify::set_allocated_friend_(::pbmsg::FriendNotify* friend_) {
  delete friend__;
  friend__ = friend_;
  if (friend_) {
    set_has_friend_();
  } else {
    clear_has_friend_();
  }
}

// optional .pbmsg.MessageNotify msg = 2;
inline bool Notify::has_msg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Notify::set_has_msg() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Notify::clear_has_msg() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Notify::clear_msg() {
  if (msg_ != NULL) msg_->::pbmsg::MessageNotify::Clear();
  clear_has_msg();
}
inline const ::pbmsg::MessageNotify& Notify::msg() const {
  return msg_ != NULL ? *msg_ : *default_instance_->msg_;
}
inline ::pbmsg::MessageNotify* Notify::mutable_msg() {
  set_has_msg();
  if (msg_ == NULL) msg_ = new ::pbmsg::MessageNotify;
  return msg_;
}
inline ::pbmsg::MessageNotify* Notify::release_msg() {
  clear_has_msg();
  ::pbmsg::MessageNotify* temp = msg_;
  msg_ = NULL;
  return temp;
}
inline void Notify::set_allocated_msg(::pbmsg::MessageNotify* msg) {
  delete msg_;
  msg_ = msg;
  if (msg) {
    set_has_msg();
  } else {
    clear_has_msg();
  }
}

// optional .pbmsg.WelcomeNotify welcome = 3;
inline bool Notify::has_welcome() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Notify::set_has_welcome() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Notify::clear_has_welcome() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Notify::clear_welcome() {
  if (welcome_ != NULL) welcome_->::pbmsg::WelcomeNotify::Clear();
  clear_has_welcome();
}
inline const ::pbmsg::WelcomeNotify& Notify::welcome() const {
  return welcome_ != NULL ? *welcome_ : *default_instance_->welcome_;
}
inline ::pbmsg::WelcomeNotify* Notify::mutable_welcome() {
  set_has_welcome();
  if (welcome_ == NULL) welcome_ = new ::pbmsg::WelcomeNotify;
  return welcome_;
}
inline ::pbmsg::WelcomeNotify* Notify::release_welcome() {
  clear_has_welcome();
  ::pbmsg::WelcomeNotify* temp = welcome_;
  welcome_ = NULL;
  return temp;
}
inline void Notify::set_allocated_welcome(::pbmsg::WelcomeNotify* welcome) {
  delete welcome_;
  welcome_ = welcome;
  if (welcome) {
    set_has_welcome();
  } else {
    clear_has_welcome();
  }
}

// -------------------------------------------------------------------

// Message

// required .pbmsg.MSG msgType = 1;
inline bool Message::has_msgtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Message::set_has_msgtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Message::clear_has_msgtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Message::clear_msgtype() {
  msgtype_ = 10001;
  clear_has_msgtype();
}
inline ::pbmsg::MSG Message::msgtype() const {
  return static_cast< ::pbmsg::MSG >(msgtype_);
}
inline void Message::set_msgtype(::pbmsg::MSG value) {
  assert(::pbmsg::MSG_IsValid(value));
  set_has_msgtype();
  msgtype_ = value;
}

// required fixed32 sequence = 2;
inline bool Message::has_sequence() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Message::set_has_sequence() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Message::clear_has_sequence() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Message::clear_sequence() {
  sequence_ = 0u;
  clear_has_sequence();
}
inline ::google::protobuf::uint32 Message::sequence() const {
  return sequence_;
}
inline void Message::set_sequence(::google::protobuf::uint32 value) {
  set_has_sequence();
  sequence_ = value;
}

// optional fixed32 sessionId = 3;
inline bool Message::has_sessionid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Message::set_has_sessionid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Message::clear_has_sessionid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Message::clear_sessionid() {
  sessionid_ = 0u;
  clear_has_sessionid();
}
inline ::google::protobuf::uint32 Message::sessionid() const {
  return sessionid_;
}
inline void Message::set_sessionid(::google::protobuf::uint32 value) {
  set_has_sessionid();
  sessionid_ = value;
}

// optional .pbmsg.Request request = 4;
inline bool Message::has_request() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Message::set_has_request() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Message::clear_has_request() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Message::clear_request() {
  if (request_ != NULL) request_->::pbmsg::Request::Clear();
  clear_has_request();
}
inline const ::pbmsg::Request& Message::request() const {
  return request_ != NULL ? *request_ : *default_instance_->request_;
}
inline ::pbmsg::Request* Message::mutable_request() {
  set_has_request();
  if (request_ == NULL) request_ = new ::pbmsg::Request;
  return request_;
}
inline ::pbmsg::Request* Message::release_request() {
  clear_has_request();
  ::pbmsg::Request* temp = request_;
  request_ = NULL;
  return temp;
}
inline void Message::set_allocated_request(::pbmsg::Request* request) {
  delete request_;
  request_ = request;
  if (request) {
    set_has_request();
  } else {
    clear_has_request();
  }
}

// optional .pbmsg.Respond respond = 5;
inline bool Message::has_respond() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Message::set_has_respond() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Message::clear_has_respond() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Message::clear_respond() {
  if (respond_ != NULL) respond_->::pbmsg::Respond::Clear();
  clear_has_respond();
}
inline const ::pbmsg::Respond& Message::respond() const {
  return respond_ != NULL ? *respond_ : *default_instance_->respond_;
}
inline ::pbmsg::Respond* Message::mutable_respond() {
  set_has_respond();
  if (respond_ == NULL) respond_ = new ::pbmsg::Respond;
  return respond_;
}
inline ::pbmsg::Respond* Message::release_respond() {
  clear_has_respond();
  ::pbmsg::Respond* temp = respond_;
  respond_ = NULL;
  return temp;
}
inline void Message::set_allocated_respond(::pbmsg::Respond* respond) {
  delete respond_;
  respond_ = respond;
  if (respond) {
    set_has_respond();
  } else {
    clear_has_respond();
  }
}

// optional .pbmsg.Notify notify = 6;
inline bool Message::has_notify() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Message::set_has_notify() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Message::clear_has_notify() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Message::clear_notify() {
  if (notify_ != NULL) notify_->::pbmsg::Notify::Clear();
  clear_has_notify();
}
inline const ::pbmsg::Notify& Message::notify() const {
  return notify_ != NULL ? *notify_ : *default_instance_->notify_;
}
inline ::pbmsg::Notify* Message::mutable_notify() {
  set_has_notify();
  if (notify_ == NULL) notify_ = new ::pbmsg::Notify;
  return notify_;
}
inline ::pbmsg::Notify* Message::release_notify() {
  clear_has_notify();
  ::pbmsg::Notify* temp = notify_;
  notify_ = NULL;
  return temp;
}
inline void Message::set_allocated_notify(::pbmsg::Notify* notify) {
  delete notify_;
  notify_ = notify;
  if (notify) {
    set_has_notify();
  } else {
    clear_has_notify();
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pbmsg

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pbmsg::MSG>() {
  return ::pbmsg::MSG_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pbmsg::ERR_CODE>() {
  return ::pbmsg::ERR_CODE_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Message_2eproto__INCLUDED
